% dimensions = ['2', '3', '4']
% dimension_to_elements = {
%   '2': ['x', 'y'],
%   '3': ['x', 'y', 'z'],
%   '4': ['x', 'y', 'z', 'w'],
% }
% scalar_types = ['Float', 'Double']
% scalar_type_to_symbol = {'Float': 'f', 'Double': ''}
% scalar_type_to_simd_type_prefix = {'Float': 'vector_float', 'Double': 'vector_double'}
#if canImport(simd)
@_exported import simd
#endif
%
% for dimension in dimensions:
%   elements = dimension_to_elements[dimension]   
%   for scalar_type in scalar_types:
%     symbol = scalar_type_to_symbol[scalar_type]
%     simd_type_prefix = scalar_type_to_simd_type_prefix[scalar_type]

#if canImport(simd)
public typealias Vector${dimension}${symbol} = ${simd_type_prefix}${dimension}

extension Vector${dimension}${symbol}: Vector {}

extension Vector${dimension}${symbol}: Codable {
    private enum CodingKeys: CodingKey {
%     for element in elements:
        case ${element}
%     end
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.init(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: try container.decode(${scalar_type}.self, forKey: .${element})${',' if has_comma else ''}
%     end
        )
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
%     for element in elements:
        try container.encode(${element}, forKey: .${element})
%     end
    }
}

#else

public struct Vector${dimension}${symbol}: Vector, Codable {
%     for element in elements:
    public var ${element}: ${scalar_type}
%     end
    
    public init(

%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
        ${element}: ${scalar_type}${',' if has_comma else ''}
%     end
    ) {
%     for element in elements:
        self.${element} = ${element}
%     end
    }

    public static func +(lhs: Vector${dimension}${symbol}, rhs: Vector${dimension}${symbol}) -> Vector${dimension}${symbol} {
        return Vector${dimension}${symbol}(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: lhs.${element} + rhs.${element}${',' if has_comma else ''}
%     end
        )
    }
    
    public static func -(lhs: Vector${dimension}${symbol}, rhs: Vector${dimension}${symbol}) -> Vector${dimension}${symbol} {
        return Vector${dimension}${symbol}(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: lhs.${element} - rhs.${element}${',' if has_comma else ''}
%     end
        )
    }
    
    public static func *(lhs: Vector${dimension}${symbol}, rhs: ${scalar_type}) -> Vector${dimension}${symbol} {
        return Vector${dimension}${symbol}(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: lhs.${element} * rhs${',' if has_comma else ''}
%     end
        )
    }
    
    public static func /(lhs: Vector${dimension}${symbol}, rhs: ${scalar_type}) -> Vector${dimension}${symbol} {
        return Vector${dimension}${symbol}(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: lhs.${element} / rhs${',' if has_comma else ''}
%     end
        )
    }
    
    public static func ==(lhs: Vector${dimension}${symbol}, rhs: Vector${dimension}${symbol}) -> Bool {
%     for i, element in enumerate(elements):
%       if i == 0:
        return lhs.${element} == rhs.${element}
%       else:
            && lhs.${element} == rhs.${element}
%       end
%     end
    }
}

extension Vector${dimension}${symbol}: ExpressibleByArrayLiteral {
    public init(arrayLiteral elements: ${scalar_type}...) {
        precondition(elements.count == ${dimension})
        
        self.init(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
            ${element}: elements[${i}]${',' if has_comma else ''}
%     end
        )
    }
}

#endif

extension Vector${dimension}${symbol} {
    public func dotProduct(with v: Vector${dimension}${symbol}) -> ${scalar_type} {
%     for i, element in enumerate(elements):
%       if i == 0:
        return ${element} * v.${element}
%       else:
            + ${element} * v.${element}
%       end
%     end
    }
%
%     if dimension == '3':

    public func crossProduct(with v: Vector3${symbol}) -> Vector3${symbol} {
        return Vector3${symbol}(
            x: y * v.z - z * v.y,
            y: z * v.x - x * v.z,
            z: x * v.y - y * v.x
        )
    }
%     end
    
    public static let zero: Vector${dimension}${symbol} = Vector${dimension}${symbol}(
%     for i, element in enumerate(elements):
%       has_comma = i < len(elements) - 1
        ${element}: 0${',' if has_comma else ''}
%     end
    )
    
    public var description: String {
        return "[${', '.join(['\(' + element + '.description)' for element in elements])}]"
    }
    
    public var debugDescription: String {
        return "[${', '.join(['\(' + element + '.debugDescription)' for element in elements])}]"
    }
}
%   end
% end
